{"version":3,"sources":["webpack:///./src/app/public/register/register.module.ts","webpack:///./src/app/public/register/register.page.html","webpack:///./src/app/public/register/register.page.scss","webpack:///./src/app/public/register/register.page.ts"],"names":[],"mappings":"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","file":"public-register-register-module.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { IonicModule } from '@ionic/angular';\r\nimport { RegisterPage } from './register.page';\r\nimport { MaterialModule } from 'src/app/material.module';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: RegisterPage\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    IonicModule,\r\n    MaterialModule,\r\n    ReactiveFormsModule,\r\n    RouterModule.forChild(routes)\r\n  ],\r\n  declarations:[RegisterPage]\r\n})\r\nexport class RegisterPageModule {}\r\n","module.exports = \"<ion-header class=\\\"header-extrato\\\">\\r\\n  <ion-toolbar class=\\\"no-radius\\\">\\r\\n    <ion-buttons slot=\\\"end\\\">\\r\\n      <ion-back-button text=\\\"\\\" icon=\\\"arrow-back\\\"></ion-back-button>\\r\\n    </ion-buttons>\\r\\n  </ion-toolbar>\\r\\n</ion-header>\\r\\n\\r\\n<ion-content padding=\\\"true\\\" class='background'>\\r\\n\\r\\n  <form [formGroup]=\\\"form\\\">\\r\\n    <ion-grid>\\r\\n      <ion-row color=\\\"primary\\\" class=\\\"ion-justify-content-center\\\">\\r\\n        <ion-col class=\\\"ion-align-self-center\\\" size-md=\\\"6\\\" size-lg=\\\"5\\\" size-xs=\\\"12\\\">\\r\\n          <div class=\\\"ion-text-center\\\">\\r\\n            <img src=\\\"assets/imgs/logo_pb.png\\\">\\r\\n            <span class=\\\"title\\\">\\r\\n              Venha fazer parte da nossa comunidade!\\r\\n            </span>\\r\\n          </div>\\r\\n\\r\\n          <div class=\\\" \\\">\\r\\n            <ion-label>Nome completo <span class=\\\"required\\\">*</span></ion-label>\\r\\n            <mat-icon class=\\\"main-icon\\\" matSuffix>account_circle</mat-icon>\\r\\n            <mat-form-field class=\\\"full-width\\\">\\r\\n              <input matInput autocomplete=\\\"off\\\" formControlName=\\\"name\\\">\\r\\n            </mat-form-field>\\r\\n\\r\\n            <ion-label>E-mail @mdlz.com <span class=\\\"required\\\">*</span></ion-label>\\r\\n            <mat-icon class=\\\"main-icon\\\" matSuffix>email</mat-icon>\\r\\n            <mat-form-field class=\\\"full-width\\\">\\r\\n\\r\\n              <input matInput autocomplete=\\\"off\\\" type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"\\\" aria-label=\\\"\\\"\\r\\n                aria-describedby=\\\"basic-addon2\\\" formControlName=\\\"email\\\">\\r\\n\\r\\n            </mat-form-field>\\r\\n\\r\\n            <ion-label>Nº da Matrícula <span class=\\\"required\\\">*</span></ion-label>\\r\\n            <mat-icon class=\\\"main-icon\\\" matSuffix>file_copy</mat-icon>\\r\\n            <mat-form-field class=\\\"full-width\\\">\\r\\n              <input matInput autocomplete=\\\"off\\\" formControlName=\\\"registration\\\">\\r\\n            </mat-form-field>\\r\\n\\r\\n            <ion-label>Fábrica <span class=\\\"required\\\">*</span></ion-label>\\r\\n            <mat-form-field class=\\\"full-width margin-top\\\">\\r\\n              <mat-select formControlName=\\\"factory\\\" (selectionChange)=\\\"getSections()\\\">\\r\\n                <mat-option *ngFor=\\\"let factory of factories\\\" [value]=\\\"factory.id\\\">\\r\\n                  {{factory.nome}}\\r\\n                </mat-option>\\r\\n              </mat-select>\\r\\n            </mat-form-field>\\r\\n\\r\\n            <ion-label>Seção <span class=\\\"required\\\">*</span></ion-label>\\r\\n            <mat-form-field class=\\\"full-width margin-top\\\">\\r\\n              <mat-select formControlName=\\\"section\\\" (selectionChange)=\\\"getLines()\\\">\\r\\n                <mat-option *ngFor=\\\"let section of sections\\\" [value]=\\\"section.id\\\">\\r\\n                  {{section.nome}}\\r\\n                </mat-option>\\r\\n              </mat-select>\\r\\n            </mat-form-field>\\r\\n\\r\\n            <ion-label>Linha <span class=\\\"required\\\">*</span></ion-label>\\r\\n            <mat-form-field class=\\\"full-width margin-top\\\">\\r\\n              <mat-select formControlName=\\\"line\\\">\\r\\n                <mat-option *ngFor=\\\"let line of lines\\\" [value]=\\\"line.id\\\">\\r\\n                  {{line.nome}}\\r\\n                </mat-option>\\r\\n              </mat-select>\\r\\n            </mat-form-field>\\r\\n\\r\\n            <ion-label>Senha <span class=\\\"required\\\">*</span></ion-label>\\r\\n            <mat-icon class=\\\"main-icon\\\" matSuffix>lock</mat-icon>\\r\\n            <mat-form-field class=\\\"full-width\\\">\\r\\n              <input matInput [type]=\\\"hide ? 'password' : 'text'\\\" autocomplete=\\\"off\\\" formControlName=\\\"password\\\">\\r\\n              <mat-icon class=\\\"dark-icon\\\" matSuffix (click)=\\\"hide = !hide\\\">{{hide ? 'visibility_off' : 'visibility'}}\\r\\n              </mat-icon>\\r\\n            </mat-form-field>\\r\\n\\r\\n            <ion-label>Confirmar Senha <span class=\\\"required\\\">*</span></ion-label>\\r\\n            <mat-icon class=\\\"main-icon\\\" matSuffix>lock</mat-icon>\\r\\n            <mat-form-field class=\\\"full-width\\\">\\r\\n              <input matInput [type]=\\\"hide ? 'password' : 'text'\\\" autocomplete=\\\"off\\\" formControlName=\\\"passwordConfirm\\\">\\r\\n              <mat-icon class=\\\"dark-icon\\\" matSuffix (click)=\\\"hide = !hide\\\">{{hide ? 'visibility_off' : 'visibility'}}\\r\\n              </mat-icon>\\r\\n            </mat-form-field>\\r\\n\\r\\n            <ion-checkbox formControlName=\\\"termsOfUse\\\"> </ion-checkbox> <span class=\\\"termo-uso\\\">Ao marcar este campo\\r\\n              você estará concordando com os nossos <a (click)=\\\"readTerms()\\\">termos de uso & política de\\r\\n                privacidade</a></span>\\r\\n\\r\\n          </div>\\r\\n          <div class=\\\"ion-margin-top\\\">\\r\\n\\r\\n            <button type=\\\"submit\\\" (click)=\\\"register()\\\" class=\\\"btn-mdlz\\\" block>\\r\\n              Realizar Cadastro</button>\\r\\n\\r\\n          </div>\\r\\n\\r\\n        </ion-col>\\r\\n      </ion-row>\\r\\n    </ion-grid>\\r\\n  </form>\\r\\n</ion-content>\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3B1YmxpYy9yZWdpc3Rlci9yZWdpc3Rlci5wYWdlLnNjc3MifQ== */\"","import { Component, OnInit } from '@angular/core';\r\nimport { MenuController, ModalController } from '@ionic/angular';\r\nimport { BackendApiProvider } from 'src/providers/backend-api/backend-api.service';\r\nimport { Utils } from 'src/commons/Utils';\r\nimport { FormBuilder, FormGroup, Validators, FormControl } from '@angular/forms';\r\nimport { CustomValidators } from 'src/app/validators/CustomValidators';\r\nimport { ErrorMessage, ErrorType, AlertText, AlertTitle, ToastText } from 'src/commons/Constants';\r\nimport { Router } from '@angular/router';\r\nimport { TermsOfUsePage } from '../terms-of-use/terms-of-use.page';\r\nimport { Factory } from 'src/models/Factory';\r\nimport { Line } from 'src/models/Line';\r\nimport { Section } from 'src/models/Section';\r\nimport { LoaderService } from 'src/providers/loader-service/loader.service';\r\n\r\n//-------------------------------------------------------------------------------------------------------------------------------//\r\n\r\n@Component({\r\n  selector: 'app-register',\r\n  templateUrl: './register.page.html',\r\n  styleUrls: ['./register.page.scss'],\r\n})\r\n\r\n\r\n//-------------------------------------------------------------------------------------------------------------------------------//\r\n\r\nexport class RegisterPage implements OnInit {\r\n\r\n  //-------------------------------------------------------------------------------------------------------------------------------//\r\n\r\n  private readonly logHeader = \"RegisterPage>>\";\r\n  hide = true;\r\n  form: FormGroup;\r\n  factories: Array<Factory> = new Array<Factory>();\r\n  sections: Array<Section> = new Array<Section>();\r\n  lines: Array<Line> = new Array<Line>();\r\n  managers: Array<string> = new Array<string>();\r\n  enviado = false;\r\n  //-------------------------------------------------------------------------------------------------------------------------------//\r\n\r\n  constructor(public menu: MenuController,\r\n    private api: BackendApiProvider,\r\n    private formBuilder: FormBuilder,\r\n    private utils: Utils,\r\n    private router: Router,\r\n    private modalCtrl: ModalController,\r\n    private loader: LoaderService) {\r\n\r\n    const logHeader = this.logHeader + \"constructor>>\";\r\n    Utils.log(logHeader);\r\n\r\n    this.form = this.formBuilder.group({\r\n      name: new FormControl('', Validators.compose([\r\n        Validators.required\r\n      ])),\r\n\r\n      email: new FormControl('', Validators.compose([\r\n        Validators.required\r\n      ])),\r\n\r\n      registration: new FormControl('', Validators.compose([\r\n        Validators.required,\r\n      ])),\r\n\r\n      factory: new FormControl('', Validators.compose([\r\n        Validators.required,\r\n      ])),\r\n\r\n      section: new FormControl('', Validators.compose([\r\n        Validators.required,\r\n      ])),\r\n\r\n      line: new FormControl('', Validators.compose([\r\n        Validators.required,\r\n      ])),\r\n\r\n      password: new FormControl('', Validators.compose([\r\n        Validators.required,\r\n        Validators.minLength(6),\r\n        Validators.maxLength(30)\r\n      ])),\r\n\r\n      passwordConfirm: new FormControl('', Validators.compose([\r\n        Validators.required,\r\n        Validators.minLength(6),\r\n        Validators.maxLength(30),\r\n      ])),\r\n      termsOfUse: new FormControl(undefined, Validators.compose([\r\n        Validators.required,\r\n        Validators.requiredTrue\r\n      ]))\r\n    });\r\n  }\r\n\r\n  //-------------------------------------------------------------------------------------------------------------------------------//\r\n\r\n  ngOnInit() {\r\n    const logHeader = this.logHeader + \"ngOnInit>>\";\r\n    Utils.log(logHeader);\r\n    this.getFactories();\r\n  }\r\n\r\n  //-------------------------------------------------------------------------------------------------------------------------------//\r\n\r\n  getFactories() {\r\n    const logHeader = this.logHeader + \"getFactories>>\";\r\n    Utils.log(logHeader);\r\n    this.api.getFactories().then((factories: Array<Factory>) => {\r\n      this.factories = factories;\r\n    }).catch((error) => this.utils.simpleToastError(error + '\\n' + ToastText.SOMETHING_WENT_WRONG));\r\n  }\r\n\r\n  //-------------------------------------------------------------------------------------------------------------------------------//\r\n\r\n  async getSections() {\r\n    const logHeader = this.logHeader + \"getSections>>\";\r\n    Utils.log(logHeader);\r\n    this.api.getSections(this.form.value.factory).then((sections: Array<Section>) => {\r\n      this.sections = sections;\r\n    }).catch((error) => this.utils.simpleToastError(error + '\\n' + ToastText.SOMETHING_WENT_WRONG));\r\n  }\r\n\r\n  //-------------------------------------------------------------------------------------------------------------------------------//\r\n\r\n  async getLines() {\r\n    const logHeader = this.logHeader + \"getLines>>\";\r\n    Utils.log(logHeader);\r\n    this.api.getLines(this.form.value.section).then((lines: Array<Line>) => {\r\n      this.lines = lines;\r\n    }).catch((error) => this.utils.simpleToastError(error + '\\n' + ToastText.SOMETHING_WENT_WRONG));\r\n  }\r\n\r\n  //-------------------------------------------------------------------------------------------------------------------------------//\r\n\r\n  async register() {\r\n\r\n    this.enviado = true;\r\n    const logHeader = this.logHeader + \"register>>\";\r\n    Utils.log(logHeader);\r\n    if (Utils.isVarInvalid(this.form) || Utils.isVarInvalid(this.form.value)) {\r\n      throw new Error(logHeader + ErrorMessage.INVALID_VARIABLE + \">>FORM>>\" + JSON.stringify(this.form));\r\n    }\r\n    if (Utils.isStringInvalid(this.form.value.name)) {\r\n      this.utils.simpleToastError(ToastText.INSERT_NAME);\r\n      throw new Error(logHeader + ErrorMessage.INVALID_VARIABLE + \">>NAME>>\" + this.form.value.name);\r\n    }\r\n    if (Utils.isStringInvalid(this.form.value.email)) {\r\n      this.utils.simpleToastError(ToastText.INSERT_EMAIL);\r\n      throw new Error(logHeader + ErrorMessage.INVALID_VARIABLE + \">>EMAIL>>\" + this.form.value.email);\r\n    }\r\n    if (!this.form.value.email.toLowerCase().includes('@mdlz.com')) {\r\n      this.utils.simpleToastError(ToastText.INSERT_MONDELEZ_EMAIL);\r\n      throw new Error(logHeader + ErrorMessage.INVALID_VARIABLE + \">>EMAIL>>\" + this.form.value.email);\r\n    }\r\n    if (Utils.isStringInvalid(this.form.value.registration)) {\r\n      this.utils.simpleToastError(ToastText.INSERT_REGISTRATION);\r\n      throw new Error(logHeader + ErrorMessage.INVALID_VARIABLE + \">>REGISTRATION>>\" + this.form.value.registration);\r\n    }\r\n    if (Utils.isStringInvalid(this.form.value.factory)) {\r\n      this.utils.simpleToastError(ToastText.INSERT_FACTORY);\r\n      throw new Error(logHeader + ErrorMessage.INVALID_VARIABLE + \">>FACTORY>>\" + this.form.value.factory);\r\n    }\r\n    if (Utils.isStringInvalid(this.form.value.section)) {\r\n      this.utils.simpleToastError(ToastText.INSERT_SECTION);\r\n      throw new Error(logHeader + ErrorMessage.INVALID_VARIABLE + \">>SECTION>>\" + this.form.value.section);\r\n    }\r\n    if (Utils.isStringInvalid(this.form.value.line)) {\r\n      this.utils.simpleToastError(ToastText.INSERT_LINE);\r\n      throw new Error(logHeader + ErrorMessage.INVALID_VARIABLE + \">>LINE>>\" + this.form.value.line);\r\n    }\r\n    if (Utils.isStringInvalid(this.form.value.password)) {\r\n      this.utils.simpleToastError(ToastText.INSERT_PASSWORD);\r\n      throw new Error(logHeader + ErrorMessage.INVALID_VARIABLE + \">>PASSWORD>>\" + this.form.value.password);\r\n    }\r\n    if (Utils.isStringInvalid(this.form.value.passwordConfirm)) {\r\n      this.utils.simpleToastError(ToastText.INSERT_PASSWORD_CONFIRM);\r\n      throw new Error(logHeader + ErrorMessage.INVALID_VARIABLE + \">>PASSWORD_CONFIRM>>\" + this.form.value.passwordConfirm);\r\n    }\r\n    if (this.form.value.password != this.form.value.passwordConfirm) {\r\n      this.utils.simpleToastError(ToastText.PASSWORDS_DONT_MATCH);\r\n      throw new Error(logHeader + ErrorMessage.INVALID_VARIABLE + \">>PASSWORDS_DONT_MATCH>>\" + this.form.value.password + '>>' + this.form.value.passwordConfirm);\r\n    }\r\n    if (!this.form.value.termsOfUse) {\r\n      this.utils.simpleToastError(ToastText.ACCEPT_TERMS);\r\n      throw new Error(logHeader + ErrorMessage.INVALID_VARIABLE + \">>TERMS_OF_USE>>\" + this.form.value.termsOfUse);\r\n    }\r\n    this.api.userRegister(this.form.value).then((response) => {\r\n      if (!Utils.isVarInvalid(response)) {\r\n        if (Utils.hasOkStatus(response)) {\r\n          this.utils.simpleAlert(AlertTitle.WARNING, AlertText.SIGNUP_SUCCESSFUL);\r\n          this.router.navigate(['/login'])\r\n        }\r\n        else {\r\n          this.utils.simpleToastError(ToastText.SOMETHING_WENT_WRONG);\r\n        }\r\n      }\r\n      else {\r\n        this.utils.simpleToastError(ToastText.SOMETHING_WENT_WRONG);\r\n      }\r\n    }).catch((error) => {\r\n      if ((error._body as string).includes(ErrorMessage.INVALID_FORM)) {\r\n        this.utils.simpleToastError(ErrorMessage.INVALID_FORM);\r\n      }\r\n      if ((error._body as string).includes(ErrorType.USER_ALREADY_ACTIVATED)) {\r\n        this.utils.simpleToastError(ToastText.USER_ALREADY_ACTIVATED);\r\n      }\r\n      if ((error._body as string).includes(ErrorType.MANDATORY_MDLZ_EMAIL)) {\r\n        this.utils.simpleToastError(ToastText.INSERT_MONDELEZ_EMAIL);\r\n      }\r\n      else {\r\n        this.utils.simpleToastError(ToastText.SOMETHING_WENT_WRONG);\r\n      }\r\n    })\r\n  }\r\n\r\n  //-------------------------------------------------------------------------------------------------------------------------------//\r\n\r\n  async readTerms() {\r\n    const logHeader = this.logHeader + \"readTerms>>\";\r\n    Utils.log(logHeader);\r\n    this.modalCtrl.create({\r\n      component: TermsOfUsePage,\r\n      componentProps: {}\r\n    }).then((modal) => {\r\n      Utils.log(logHeader + \"MODAL_PRESENT\");\r\n      modal.present();\r\n    }).catch((error) => {\r\n      throw error;\r\n    });\r\n  }\r\n\r\n  //-------------------------------------------------------------------------------------------------------------------------------//\r\n\r\n}\r\n"],"sourceRoot":""}